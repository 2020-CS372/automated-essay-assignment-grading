Figure 3. UML with OWL-S Stereotypes
Figure 2. First, a UML Class Diagram is  created in Poseidon [8] with the UML profile for OWL- S. The class diagram is exported in XMI format. The  conversion tool is invoked from the command-line and  runs multiple transformations on the input file to  produce the corresponding ServiceProfile, ServiceModel  Service and ServiceGrounding OWL-S documents. The  transformations come in the form of XSLT  transformations automatically performed on an XMI  file.  From the standpoint of MDA terminology, the     process of creating a UML diagram can be considered  equivalent to creating a platform independent model  (PIM).  The XSLT transformation correspond to other   information necessary to generate a second level PIM in  the form of an OWL-S specification.  The act of  specifying groundings, which is part of the framework  we are developing, but outside the scope of the tool  described here, corresponds to creating a platform  specific model (PSM) in the sense that the mapping  provides information specific to creating a specific  executable implementation of a semantic service.       Table1. UML to OWL Mapping    4.  Example    The CongoBuy service is an example developed by  the OWL-S working group to demonstrate the features  of the OWL ontology for services.  The example is a  fictitious B2C company that offers a number of services  including the ability for customers to buy books on the  web. Figure 3 shows a class diagram that models the  CongoBuy service with the OWL-S stereotypes.  Specifically, it shows the specification for an Express  CongoBuyService that allows a user to directly purchase  a book without using a browsing service.  The class  diagram represents the core structure of the OWL-S  description as represented in the UML. Other classes,  stereotypes and tagged values are also needed in order to  generate the corresponding OWL-S documents.   The example contains seven classes, three of which  are OWL classes specified with the << owl:Class>>  UML stereotype.  These classes are domain concepts that  are relevant to the service being specified.  Specifically,  they are elements of ontologies pertinent to the book  buying and shipping domains and act as “types” for the  input and output parameters of the service.  The remain- ing four classes specify the top level service (Express  CongoBuy-Service) and its constituent profile, model,  and grounding (Profile CongoBookBuying Service,  ExpressCongoBuyProcessModel, and CongoBuyGroun- ding respectively).   The single operation in the ExpressCongoBuyProcess  Model class represents an OWL-S AtomicProcess. 

