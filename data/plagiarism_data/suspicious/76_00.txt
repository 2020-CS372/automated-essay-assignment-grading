Figure 1. Cloud Reference Architecture
 Users can order and manage  services without human interaction with the service  provider, using, e.g., a web portal and management  interface.  Provisioning and de-provisioning of services  and associated resources occur automatically at the  provider.   • Ubiquitous network access.  Cloud services are  accessed via the network, usually the internet, using  standard mechanisms and protocols.   • Resource pooling.  Computing resources used to  provide the cloud service are realized using a  homogeneous infrastructure which is shared between  all users of the service.   • Rapid elasticity.  Resources can be scaled up and down  rapidly and elastically.   • Measured service.  Resource/service usage is  constantly metered, supporting optimization of  resource usage, usage reporting to the customer and  pay-as-you-go business models.    III. A REFERENCE ARCHITECTURE OF CLOUD COMPUTING  The stack of cloud service models Software as a  Service (SAAS), Platform as a Service (PAAS) and  Infrastructure as a Service (IAAS) is well established [2].   Fig. 1 shows a reference architecture with a special focus  on making the most important security-relevant cloud  components explicit and providing an abstract yet  complete overview of cloud computing as the basis for  the analysis of security issues.   The reference architecture inherits the layered  approach in that layers may encompass one or more  service components.  Here, “service“ must be understood  in the broad sense of providing something that may be  both material (e.g., shelter, power, hardware, etc.) as well  as immaterial (e.g., a runtime environment).  For two  layers, namely “Cloud Software Environment“ and  “Cloud Software Infrastructure“, the model makes the  three main service components of these layers –  computation, storage and communication – explicit.  It is  important to note that the services in the top layer can be  implemented on the basis of layers further down the stack  as well, in effect skipping intermediate layers.  For  example, a cloud web application can still be  implemented and operated in the traditional way, namely  running on top of a standard operating system without  making use of dedicated cloud software infra-structure  and environment components.   The layering and compositionality imply that the  transition from providing some service / function in- house vs. sourcing the service / function can take place  between any of the layers exhibited in the model. 

