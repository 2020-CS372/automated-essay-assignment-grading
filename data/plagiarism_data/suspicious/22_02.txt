Figure 8. Sample Components
 By maintaining the validity of the constraints with each com- ponent selection, we are guaranteed to construct a correct speciﬁcation morphism.  Speciﬁcation-based component re- trieval is used to assist this process. Figure 7. Interface Speciﬁcation forFind. Binary Search y ordered(w) w x Sort true x bag(x)=bag(y) /\      ordered(y) y y.key=x /\      element(y,w)  Figure 8. Sample Components There are two ways in which architectures can be applied to component adaptation: augmentation and subcomponent replacement. In the ﬁrst case, a component is treated as black box and its behavior is modiﬁed by placing it into an architecture with other components.  In the second case, the component to be adapted is an architectural component.  The behavior of the architecture can be modiﬁed by replacing one of its subcomponents.  6.1. Augmentation In augmentation we modify a component’s behavior by placing it into a simple architecture.  For example, con- sider the problem speciﬁcation for theFind component in Figure 7. A speciﬁcation-based component retrieval mecha- nism would return theBinary Search component from Figure 8 as a possible candidate for reuse due to their iden- tical output conditions.  However, Binary Search does not satisfyFind because its behavior is not deﬁned for all of the legal inputs toFind.  Instead, the Weak Post match holds between the two speciﬁcations: Weak Post: (I B S ^ O B S ) ) O F This information can be used to guide component adapta- tion.  Speciﬁcally, if we can adapt Binary Search to cover the rest of the legal inputs, then we will have a com- plete solution to the problem.  The component can be properly adapted by placing it in an architecture with another component that provides the missing functionality required to solve the problem.  We have identiﬁed two adaptation tactics that will work, shown in Figure 9: add a component that (a) solves the problem(a) (b) BSearch BSearch ? ? Find Find A B A B Figure 9. Adaptation Tactics for Weak Post in the situations where Binary Search does not or (b) maps all legal problem inputs to legal Binary Search inputs in such a way that a valid solution is generated.  We are currently investigatingalternate architectures and heuris- tics for selecting adaptation tactics. 

