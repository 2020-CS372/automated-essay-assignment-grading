Figure 11. The structure of the
  To react to the new signal from the broken tool detection algorithm, the machine-level control logic needs to be changed, while the rest of behaviors remain the same.  Figure 10 shows the new machine-level FSM.  Figure 10. Machine-level FSM with broken tool detection  5.2. Reconfigurable Machine Tool Controller # We then modified the Mobile motion control software to construct another motion control software for a reconfigurable Machine Tool (RMT).  RMT is a modularized and composable machine tool with 2-axis and  a 2-position discrete device.  Unlike the Mobile, the RMT motion controller needs neither coordinated motion nor  monitoring.  The same axes and translator components are used to con-struct the RMT motion controller.  A new component, Spindle, is added into the system to control the discrete device.  The software structure for RMT controller is illustrated in Figure 11. The behavior specifications for Axis components are the same as those used for the Mobile.  The behavior specifications for the new added Spindle component is simple with only 3 states representing the position of in or out and      the situation of estop, and transitions with corresponding events, as shown in Figure 12.  Figure 11. The structure of the RMT motion controller software Figure 12. FSM for the spindle component.   Since the new Spindle component introduced new control logic in to the system, the overall machine-level FSM was implemented, as shown in Figure 13. The G-code program Figure 13. The machine-level FSM for the RMT  Proceedings of the Fourth Annual ACIS International Conference on Computer and Information Science (ICIS’05)  0-7695-2296-3/05 $20. 00 © 2005 IEEE5.3. Evaluation Results # According to our experience in implementing these  controllers, the proposed architecture provides excellent  reusability and reconfigurability of software.  The component  structure separates the functionality definition from the  behavior specification so that the component can be  reused for different applications.  Table 1 illustrates the  numbers of components and behavior specifications in  both controllers and the number of mobile components  and behaviors reused in RMT. We were able to achieve  over 80% reuse of components.  On the other hand, the  reuse of behavior specifications was not        at the same high  percentage because a lower-level behavior change may  require changes at higher-levels. 

