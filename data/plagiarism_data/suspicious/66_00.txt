Fig. 1. Architecture of a Distributed System
 However, with the rapid development of CPU chips and the increasing demand of data accesses in applications, the memory resources in a distributed system become more and more expensive relative to CPU cycles.  The reasons given below are in favor to share memory and disk resources: 1.  With the rapid development of RISC and VLSI tech- nology, the speed of processors has increased dramatically in the past decade.  Increasing gap in speed between processor and memory makes performance of application programs on uniprocessor, multiprocessor and distributed systems rely more and more on effective usage of their entire memory hierarchies.  In addition, the memory and I/O components have a dominant portion in the total cost of a computer system.  2. The demand for data accesses in applications running on distributed systems has signiﬁcantly increased accordingly with the rapid establishment of local and wide-area internet infrastructure.  3. The latency of a memory miss or a page fault is about 1000 times higher than that of a memory hit.  Figure 1 illustrates the architecture of a distributed system considered in this paper, in which each node has a combination of multiple types of resources, such as CPU, memory, network capacities and disks.  In this architecture, Dynamically Scalable Closed Group of heterogeneous or homogeneous workstations has been considered.  Only workstations which are in group can initiate load balancing.  Every node have the AMI (all machines information, like IP address, resources attached, physical and virtual memory total size, speed of the processor, distance in the number of hops) ﬁle in which information about the other nodes available in closed group are stored. Fig. 1. Architecture of a Distributed System Several distributed load-balancing schemes, based on the above architecture, have been presented in the literature, mainly considering CPU [1], [6], memory [7], [8], or a combination of CPU and memory [9], [10], [11]. While these load balancing policies have been by and large very effective in increasing the utilization of resources in distributed systems, they have ignored one type of resource, namely disk I/O. The 2008 Seventh International Conference on Grid and Cooperative Computing 978-0-7695-3449-7/08 $25. 00 © 2008 IEEE DOI 10. 1109/GCC.2008.106 169impact of disk I/O on overall system performance is becoming increasingly signiﬁcant as more and more data-intensive and/or I/O-intensive applications are running on distributed systems. 

