Figure 4. Hierarchical composition model
 In our  architecture, a translator is designed and implemented as a  software component that converts a specification in a  given formalism of a model to a control plan and NFSM. Translators are domain-specific and specification  language-dependent, meaning that each translator can only convert programs in a designated specification language to control plan.  Thus, several translators may be required in a system if there are programs written in several different specification languages.  4. System integration Software integration includes component selection and bind-ing, and control plan construction (both control logic and operation sequence).  A  runtime system can be generated by mapping the integrated software onto ABCD Architectures.  4.1. Composition Model # The composition model defines how software can be  integrated with given components.  Since each reusable  component is implemented with a set of external interfaces  that uniquely define its functionality, components can be  selected based on the match of their interfaces and design  specifications.  The integration of reusable components can  be viewed as linking the components in integrated can be  viewed as linking the components with their external interfaces.  Reusable components in integrated software are organized hierarchically to support integration with different granularities, as illustrated in Figure 4. The behavior of an integrated component can then be modeled as integration of its member component behaviors.   The control logic and operation sequences of each component can be determined individually and specified in a Control Plan.  The behavior specifications can further be classified as device-dependent behaviors and device-independent behaviors.  The device- independent behaviors depend only on the application level control logic, and can be reused for      the same application with different devices.  The device-dependent behaviors are dedicated to a device or a configuration, and can be reused for different applications with the same device.  Figure 4. Hierarchical composition model  With such a composition model, both components for low- level control such as algorithms and drivers and for high- level systems can be constructed and reused.  4.2. Runtime System Construction # The integrated software obtained from the composition model cannot be executed directly on a platform since the composition model only deals with functionality. 

