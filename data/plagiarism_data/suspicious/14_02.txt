Figure 1. Framework
NET platform provide tools  that automatically generate WSDL.  Requirement R2: a technique for integrating services  into composite services by generating an OWLS  specification via the use of MDA.  The OWL-S language consists of three separate parts.   The Service Profile is a description of what the service  does.  It is similar to, yet more powerful than WSDL.  The Service Model is a description of how service works  (e.g., the semantics of the service).  Finally, the  Grounding Model is a description of how to access the  web service.  From a WSDL description, an OWL-S  description can be generated using XSLT. However, for  semantic web service composition, other information is  required to describe the operational behavior of the  service (e.g., the service model).  We are developing an  approach for generating an OWL-S Service Model by  taking an XML-based representation of a UML activity  diagram and using XSLT to transform the diagram.  In  this approach, the software developer specifies the  operation of a Web service as a composition of other  services using UML. A transformation process then  takes the UML description of the service and converts it  into the OWL-S Service Model description. Figure.1 shows the process workflow for our  approach. The framework uses a model- driven  development approach for specifying, mapping, and  executing semantic Web services.  In this regard, the  framework not only allows the specification of semantic  3 web services but facilitates the mapping of constructs in  those semantic descriptions to concrete service  realizations.  These concrete service realizations are  transformed into executable specifications for  infrastructures.  In this framework, an architect is  responsible for creating models using UML. The  framework manages the transformation process to  OWL-S with very little additional effort on behalf of the  developer.  This benefits the developer in two ways.  First  the developer is able to focus on creating models instead  of writing code or in the case of semantic Web services  creating a semantic specification.  Secondly, the  developer becomes more efficient because low-level  details are abstracted away and the developers can focus  more on the top-level structure and semantics. 

