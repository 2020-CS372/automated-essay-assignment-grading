Fig. 3: TAM Controller State Diagram
 In this paper, MUX- based direct access TAM architecture, as shown in Fig.  2 is implemented.  The TAM is used to drive the test  vectors from the test source[5][6], that is, from the fault  simulator to the desired core under test and to  transport the test response from the core back to the  fault simulator.  The selection of the core in the SoC was  implemented as part of the TAM architecture.  The  width of the TAM by the core that has the maximum                           3 number of input/output (I/O) pins within the SoC is  determined.  There are other issues for consideration at  this phase, viz. the bandwidth of the TAM versus the  cost of extra wires needed for its implementation, total  test time depending on the TAM bandwidth, test  vectors from the source, and ultimately test data for the  individual core.  The obvious mechanism to make  embedded cores testable from the IC pins[10] is to  make the core under test directly accessible from the IC  inputs.  Though this approach is mostly practiced for  embedded memory cores, many block-based ASICs  also use this test strategy.      4   TAM CONTROLLER DESIGN    As shown in Fig. 3, TAM controller is used to provide  the dynamic control signals to wrapper[4], i.e., WIP.  WIP is composed of six signals: WRCK, WRSTN,  SelectWIR, ShiftWR, CaptureWR and UpdateWR. At  the exception of WRSTN, all WIP signals are active  high.    • WRCK (Wrapper Clock): The dedicated test  clock.  • WRSTN (Wrapper Reset): The dedicated  asynchronous reset signal which resets  wrapper instruction register (WIR) and puts  the wrapper in normal operation mode.  • SelectWIR: Selects whether WIR or one of  wrapper data registers (WDR) is exclusively  connected between WSI and WSO.  • ShiftWR, CaptureWR: When the  corresponding signal is asserted, a shift or  capture operation will occur on the rising edge  of WRCK.  • UpdateWR: When it is asserted, an update   operation will occur on the falling edge of  WRCK.  • TransferDR: TransferDR is required when the  WBR includes cells with a transfer capability. Fig. 3: TAM Controller State Diagram  TAM controller can be used, as long as its outputs fully  conform to the requirement of WIP. TAM controller is a  Finite State Machine (FSM) in nature. Since WIP signals  mimic the output of TAP controller of IEEE 1149. 1[9],  here the same state-diagram as TAP (Fig. 3) is used and  the output logic of FSM is modified in order to make it  suitable for WIP. The three inputs (tclk, tms, trst) of  TAM controller have just the same meaning as in TAP,  that is, TAM controller changes its state on the rising  edge of tclk according to tms.  In our design, tclk is also  used as WRCK.    5   WRAPPER DESIGN    P1500 wrapper consists of wrapper instruction register  (WIR), wrapper bypass register (WBY), wrapper  boundary register (WBR), gating control logic,  mandatory serial path, and optional parallel paths.  The  serial path is used both for wrapper control by loading  instructions into WIR, as well as for low-bandwidth test  data access to WBR. Parallel paths are used for internal  scan-chains and high-bandwidth test data access to  WBR. A minimal library of WBR cells is presented and  the design of WBR is not depicted in this paper.  WBY  used in our wrapper is just an ordinary flip-flop.   Bypass registers both for the serial path and parallel  paths are inserted. 

