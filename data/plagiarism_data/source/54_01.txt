Fig.3: Software Applications Conceptual
      3   The COSMOS Environment  COSMOS is an integrated development environment  for the design and creation of business processes  based on the BPEL language.  The goal of COSMOS  is to provide a complete environment that would  allow the user to design, create, code, verify and  deploy a business process based on BPEL. The  concept for the COSMOS deployment stems from  the evaluation findings of BPEL and existing design  tools.        The existing BPEL design tools are either very  developer-oriented and tied to the BPEL tags instead  of process concepts, or very manager-oriented and  general, without basic features of BPEL, like fault  handling or a real execution notion.  The evaluated  tools have not business process and workflow tasks  orientation and do not provide an unambiguous,  simple, and easy way to a user without knowledge  of the BPEL language, to design and execute a  business process.  They are something more than just  simple BPEL editors with a graphical environment,  and they are not business process design tools which  will help the user to think, design and implement a  business process using Web services.  It is worth  noticing that none of these tools refer to basic  business processes concepts.        The principal idea behind COSMOS software  development process is that end-user applications,  need and use some fundamental services hidden to  the user which are responsible for communicating  with the lower services provided by a platform,  environment, network or operating system.  The  COSMOS development process considers that a  software application can be conceptually approached  as a combination of the following layers (Fig. 3):      Fig.3: Software Applications Conceptual  Architecture    • Context of use: this layer describes the interface  of the application and its semantics.  How, where,  from whom and why, the application will be  used.  An application may communicate directly  with other applications or interact with humans.   The knowledge domain in which the application  is used and the target group, are also parts of the  context of use.   • Application services: each application provides  actually some services to its users.  These high  level services compose the application services  layer and usually are provided by collaborating  software components.  • Fundamental services and persistent data  structures: this layer consists of the general, low  level and reusable software services used by the  above layers in addition to the data structures  used by the application services.  The  fundamental services are reusable classes and  wrappers of persistent data structures.  • Foundation: this layer is the base on which the  application is build.  It is the underlying,  operating system, framework, platform, libraries,  network, and hardware. 

