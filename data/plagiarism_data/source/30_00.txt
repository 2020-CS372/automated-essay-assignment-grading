Fig. 1. A multiplexer (MUX)-based direct accesss TAM architecture.
      There are two important concepts related to TAM, viz.  test pattern source and sink, and core wrapper.  The test  pattern source is responsible for generating the test vectors  or test stimuli for the desired core under test.  The test  pattern sink compares the fault-free response to the faulty  response of the core under test.  The test pattern source and  sink can be built on-chip or off-chip.  In our case, we  implemented this by using the fault simulator that  generates the test vectors, and after getting the test  response, compares it with the fault-free response.  We will  briefly discuss about fault simulation later.  There are  several ways to design and implement a TAM. Some of the  common TAM architectures are: 1) daisy chained TAMs  (that use serial shifting of test data); 2) bussed TAMs  (based on use of complex protocols); 3) direct access  TAMs (for cores with many inputs and outputs); and 4)  multiplexer (MUX)-based direct access TAMs.  In this  paper, we implemented MUX-based direct access TAM  architecture, as shown in Fig. 1. The TAM is used to drive  the test vectors from the test source, that is, from the fault  simulator to the desired core under test and to transport the  test response from the core back to the fault simulator.  The  selection of the core in the SOC was implemented as part  of the TAM architecture.  We determined the width of the  TAM by the core that has the maximum number of  input/output (I/O) pins within the SOC. There are other  issues for consideration at this phase, viz. the bandwidth of  the TAM versus the cost of extra wires needed for its  implementation, total test time depending on the TAM  bandwidth, test vectors from the source, and ultimately test  data for the individual core.  The obvious mechanism to  make embedded cores testable from the IC pins is to make  the core under test directly accessible from the IC inputs.   Though this approach is mostly practiced for embedded  memory cores, many block-based ASICs also use this test  strategy. Fig. 2. Proposed SOC test architecture.      The demultiplexer (DEMUX), multiplexer (MUX) and  control mechanism are coded such that they provide a  dedicated test mode for each core in an SOC. The control  signal connects the input bus to the specific core, and the  test vectors are passed on to the core through the bus.  Once            Source/Sink     (Test Vector/Expected               Response) User-Defined Test Access Mechanism (TAM)  MUX Based Direct Access Wrapper Wrapper Wrapper Core 1 Core 2 Core 3 Combinational  Circuits Control Mechanism MUX 173the fault simulation is done, the test response is channeled  through the output bus. 

