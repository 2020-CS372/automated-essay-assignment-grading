Figure 7: Reﬁning an
Figure 7: Reﬁning an AspectualMixinLayer. common Mixin Layers, the Logging feature is implemented as an Aspectual Mixin Layer. It consists of a logging aspect and a logging console.  The logging console prints out the logging stream and is implemented using a common Mixin.  Theloggingaspectcapturesawholesetofmethodsthatwill be reﬁned with logging code (dashed arrows).  This reﬁne- ment is homogeneous, non-hierarchy-conform, and depends on the runtime control ﬂow (dynamic crosscutting).  More- over, the use of wildcards prevents the programmer of exces- sive method extensions.  Without Aspectual Mixin Layers the programmer has to extend all target methods.  A further highlight of Aspectual Mixin Layers is that as- pects can reﬁne other aspects.  Figure 7 shows an Aspectual MixinLayerthatreﬁnestheloggingaspectbyadditionaljoin points to extend the set of intercepted methods.  Addition- ally,theloggingconsoleisreﬁnedbyadditionalfunctionality, e.g. a modiﬁed output format.  Aspects can reﬁne the methods of parents aspect as well as the parent pointcuts.  This allows to easily reuse and ex- tend of existing join point speciﬁcations (as in the logging example).  Note that reﬁning/extending aspects is concep- tually diﬀerent than applying aspects themselves.  Whereas theformercaseresultsinatransformationoftheaspectcode before applying them to the target program, the latter case applies the aspects ﬁrst.  ToexpressaspectsinAspectualMixinLayersweadoptthe syntaxofAspectC++. 

