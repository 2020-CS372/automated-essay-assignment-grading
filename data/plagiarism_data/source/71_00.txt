Fig. 3. Architecture of the proposed DA-based PID controller.
 Substituting (5) into (4), we have Y = N−1  k=0 A k   −x k,0 + M−1  j=1 x k,j 2 −j   (6) = − N−1  k=0 A k x k,0 + M−1  j=1  N−1  k=0 A k x k,j 	 2 −j . (7) Deﬁning Z j = N−1  k=0 A k x k,j ,j =0 (8) and Z 0 =− N−1  k=0 A k x k,0 (9) the outputY can then be expressed as follows: Y = M−1  j=0 Z j 2 −j . (10) In (10), the Z j ’s are the sums of the products of A k ’s and x k ’s.  Since A k ’s are constants and x k ’s are either 1 or 0, there are 2 N possible values for Z j .  Therefore, they can be precomputed and stored in an LUT. Each x k , where k=0 to N −1, forms the address of the LUT. The result Y can then be computed using shifting and addition operations for allZ j ’s fromjth bit.  2) DA-BasedPIDController: Let us consider the controller terms that are given in (3).  Assuming that u c (k), u c (k−1),CHAN et al.: DESIGN AND IMPLEMENTATION OF MODULAR FPGA-BASED PID CONTROLLERS 1901 TABLE I CONTENTS OF THE LUT P y(k), y(k−1), and D(k−1) are m-bit ﬁxed-point numbers and [j] represents thejth bit of each number, we have P(k)= m−1  j=0 (Kb×u c (k)[j]−K×y(k)[j])×2 j (11a) I(k)=I(k−1)+ m−1  j=0 KT T i ×(u c (k−1)[j]−y(k−1)[j])×2 j (11b) D(k)= m−1  j=0  T d T d +NT D(k−1)[j] − KT d N T d +NT (y(k)[j]−y(k−1)[j])  ×2 j . (11c) The results of (Kb × u c (k)[j] − K × y(k)[j]), ((KT/T i )(u c (k−1)[j]−y(k−1)[j])), ((T d /(T d +NT)) D(k−1)[j]), and ((−KT d N/(T d +NT))(y(k)[j]−y(k− 1)[j])) can be precomputed and stored in four LUTs, which are referred to as LUT P ,LUT I ,LUT D1 , and LUT D2 . The contents of LUT P is shown in Table I, with other LUTs taking a similar form.  Using the four LUTs and the corresponding shift-add accumulators (ACCs), the P(k), I(k), and D(k) terms can be obtained in m clock cycles.  The main advantage of the DA expression that is given by (11a)–(11c) lies in its capability to compute the PID function utilizing the LUT- rich FPGA. Based on (11a)–(11c), the direct DA implementation of the PID controller is shown in Fig. 3. It consists of four delay blocks, four LUTs, four ACCs, and four adders.  Delay blocks 1 and 2 are used to obtain u c (k−1) and y(k−1), while delay blocks 3 and 4 are used to generate the terms I(k−1) and D(k−1), respectively.  Four LUTs and four ACCs areusedtoprovide theterms P(k), I  (k), D1(k), and D2(k), respectively.  The ACC consists of a shift register and an adder/subtractor.  Finally, one adder computes the sum of I(k−1) andI  (k), resulting inI(k); one adder calculates the sum of D1(k) and D2(k), resulting in D(k), and two adders calculate the sum of P(k), I(k), and D(k), resulting in u(k).  The throughput (speed) of this PID implementation is (m+1) clock cycles, i.e.,m clock cycles to generate the result, and one more clock cycle to update theu c (k−1),y(k−1),I(k−1), and D(k−1) terms.  For the multiplier-based controller the throughput is one clock cycle. 

