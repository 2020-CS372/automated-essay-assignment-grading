Figure 4: NIST Cloud Reference Architecture
 Ubiquitous network access  Cloud services are accessed via the  network, usually the Internet, using standard  mechanisms and protocols.   Resource pooling  Computing resources used to provide  the Cloud service are realized using a  homogeneous infrastructure which is   shared between all users of the service.   Rapid elasticity  Resources can be scaled up and down rapidly  and elastically.   Measured service  Resource/service usage is constantly metered,  supporting optimization of resource usage,  usage reporting to the customer and pay-as- you-go business models.   A reference architecture of   Cloud Computing  The stack of Cloud service models for Software  as a Service (SaaS), Platform as a Service (PaaS)  and Infrastructure as a Service (IaaS) is well  established.  Several extensions/refinements of  this stack towards an “ontology” or “reference  architecture” have been proposed (e.g., work  carried out at UCLA and IBM [6] or by the  Cloud Security Alliance [8]).  Atos has designed  a reference architecture with a special focus on  (1) making the most important security-relevant  Cloud components explicit, and (2) providing  an abstract yet complete overview of Cloud  Computing as the basis for the analysis of  security issues.  The reference architecture shown in   Figure 4 is based on the work carried out  at UCLA and IBM [6].  It inherits the layered  approach, where layers may encompass   one or more service components.  Here,  “service” must be understood in the broad  sense of providing something that may   be both material (such as shelter, power,  hardware, etc.) as well as immaterial (such   as a runtime environment).  For two layers,  namely “Cloud Software Environment” and  “Cloud Software Infrastructure”, the model  makes the three main service components  of these layers – computation, storage and  communication – explicit. Figure 4: NIST Cloud Reference Architecture 6 Risk analysis framework for a cloud specific environmentIt is important to note that the services in the  top layer can be implemented on the basis   of layers further down the stack as well, in   effect skipping intermediate layers. For  example, a Cloud web application can still   be implemented and operated in the  “traditional” way, namely running on top   of a standard operating system without   making use of dedicated Cloud software  infrastructure and environment components.   Note that layering and compositionality imply  that the transition from providing some service/ function in-house versus sourcing the service/ function can take place between any of the  layers exhibited in the model.   In addition to the original model, supporting  functions that have relevance for services in  several layers have been identified and added  to the model as vertical spans over several  horizontal layers. 

