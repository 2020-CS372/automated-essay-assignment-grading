Figure 2. Frameworkthat synthesizes OWL-S speciﬁcations from UML models.
 It is similar to, yet more powerful than WSDL. The Ser- vice Model is a description of how service works (e.g., the semantics of the service).  Finally, The Grounding Model is a description of how to access the web service.  From a WSDL description, an OWL-S description can be gener- ated using XSLT. However, for semantic web service com- position, other information is required to describe the op- erational behavior of the service (e.g., the service model).  We are developing an approach for generating an OWL-S Service Model by taking an XML-based representation of a UML activity diagram and using XSLT to transform the diagram.  In this approach, the software developer speciﬁes the operation of a Web service as a composition of other services using UML. An automated design tool then takes the UML description of the service and converts it into the OWL-S Service Model description.  As part of our investigations, we are developing domain models for web services and web service composition as a way to facilitate translation via XSLT of WSDL speciﬁ- cations to OWL-S Grounding Models and UML Activity Diagrams to OWL-S Service Models, respectively.  Fur- thermore, we are investigating the use of different service matchmaking techniques including lightweight signature- based techniques [8] and more computationally expensive semantic techniques[9].  3.2. Framework Figure 2 shows the process workﬂow for our approach.  Theframeworkusesa model-drivendevelopmentapproach for specifying, mapping, and executing semantic Web ser- vices.  In this regard, the framework not only allows the speciﬁcation of semantic Web services but facilitates the mappingofconstructsinthosesemanticdescriptionstocon- crete service realizations.  These concrete service realiza- tions are transformed into executable speciﬁcations for in- frastructures such as a BPEL [10] execution engine.  In this framework, an architect is responsible for creating models using UML. The framework manages the transformation process to OWL-S with very little additional effort on be- half of the developer.  This beneﬁts the developer in two ways.  First, the developer is able to focus on creating mod- els instead of writing code or in the case of semantic Web services creating a semantic speciﬁcation. 

