Figure 1: Structure of an Aspect-Oriented Systemabstraction to both aspectual and non-aspectual modules.
 In Section 5 we discuss our contribution in the light of related work.  Conclusion remarks and future work are presented in Section 6.  2. TERMINOLOGY In order to consistently and unambiguously deﬁne cou- pling measurements it is necessary to establish a proper ter- minology.  Briand et al [5] introduced a terminology for ob- ject oriented (OO) systems based on set and graph theory, which Zhao [18] extended with some of the AO concepts supported by AspectJ-like languages.  This section presents terminological foundation for structural elements in an AO system.  The terminology encompasses the core abstractions across all the studied programming languages, namely Java, AspectJ,andCaesarJ.Atthesametime, thebasicterminol- ogy is agnostic to the speciﬁcities of each of these languages and its composition mechanisms.  2.1 Structure System,Components,andMembers We deﬁne an Aspect-Oriented (AO) system ’s structure as a set of fundamental elements, which subsumes its key ab- stractions for module speciﬁcations.  Figure 1 presents a detailed view of the structural abstractions deﬁned for a system.  Each type of abstraction is alternatively called an element.  An AO system S consists of a set of components, denoted by C(S).  A component c consists of a set of attributes, Att(c), a set of operations,Op(c) and a set of nested compo- nents, Nested(c).  In other words, a component is composed of subcomponents in addition to its internal attributes and operations.  The set of members of a component c is deﬁned byM(c) =Att(c)∪Op(c)∪Nested(c). Figure 1: Structure of an Aspect-Oriented System abstraction to both aspectual and non-aspectual modules. For example: (i) a component represents either a class or an interface in Java programs, (ii) a component is either a class, an interface, or an aspect in AspectJ programs, and (iii) a component is either a cclass, a conventional class, or an interface in CaesarJ programs. 

