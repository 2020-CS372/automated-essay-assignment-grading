Fig.1. Overview of our Model-based testing approach180 Q.A. Malik, J. Lilius, and L. Laibinismodels. Finally, the suﬃciently reﬁned scenarios are translated into executabletest cases which are then applied to SUT. Later in this section, we provide moredetailed information about deﬁnitions and representation of the scenarios.
 In order to support automatic generation of tests from given software models, we need to bridge this gap.  In this paper, we study this issue in the context of formal MBD by using Event-B [5,4] as our modelling language.  Event-B supports stepwise system development by reﬁnement.  We will represent formal models of software systems as Event-B speciﬁcations.  On the other hand, we express the provided use-cases as scenarios in Communicating Sequential Process (CSP) [10].  Representing scenarios as CSP expressions gives us better structure and associated tool support.  We show, by making controlled reﬁnements of our Event-B models, that we can automatically derive the ﬁnal tests from the original scenarios.  An overview of the approach is given is given in Fig. 1. This work is based on our earlier approach [16] for scenario-based testing from B models.  The program reﬁnement approach has been extensively used to model com- plex software systems, such as control systems, communication systems etc.  It allows us to gradually incorporate implementation details and therefore, helps us to deal with overall complexity.  For such systems, it is really important to be dependable i.e., to function even in the presence of faults and failures.  The re- ﬁnement approach allows us to gradually incorporate fault tolerance mechanisms describing how the system reacts on abnormal situations.  In [11], a methodol- ogy for developing fault-tolerant systems in a stepwise manner is proposed.  Our work, presented in this paper, is also based on stepwise development and thus very suitable for testing the desired properties and features of the systems that weredevelopedinsuch a way. 

